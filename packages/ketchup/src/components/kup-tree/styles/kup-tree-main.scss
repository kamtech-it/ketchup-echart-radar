/**
* @prop --kup-tree-border: Sets border of the component.
* @prop --kup-tree-color: Sets text color of the component.
* @prop --kup-tree-color-rgb: Sets text color RGB values of the component (used for shaders).
* @prop --kup-tree-filter-background-color: Sets the background color of the global filter.
* @prop --kup-tree-font-family: Sets font family of the component.
* @prop --kup-tree-font-family-monospace: Sets monospace font family of the component (for number cells).
* @prop --kup-tree-font-size: Sets font size of the component.
* @prop --kup-tree-hover-color: Sets hover color of the component.
* @prop --kup-tree-hover-background-color: Sets hover background color of the component.
* @prop --kup-tree-icon-color: Sets icons color.
* @prop --kup-tree-primary-color: Sets the primary color of the component.
* @prop --kup-tree-primary-color-rgb: Sets the primary color RGB values of the component (used for shaders).
* @prop --kup-tree-text-on-primary-color: Sets the text on primary color of the component.
*/

:host {
  --kup_tree_border: var(--kup-tree-border, 1px solid var(--kup-border-color));
  --kup_tree_color: var(--kup-tree-color, var(--kup-text-color));
  --kup_tree_color_rgb: var(--kup-tree-color-rgb, var(--kup-text-color-rgb));
  --kup_tree_font_family: var(--kup-tree-font-family, var(--kup-font-family));
  --kup_tree_filter_background_color: var(--kup-tree-filter-background-color, var(--kup-background-color));
  --kup_tree_font_family_monospace: var(
    --kup-tree-font-family-monospace,
    var(--kup-font-family-monospace)
  );
  --kup_tree_font_size: var(--kup-tree-font-size, var(--kup-font-size));
  --kup_tree_hover_color: var(--kup-tree-hover-color, var(--kup-hover-color));
  --kup_tree_hover_background_color: var(
    --kup-tree-hover-background-color,
    var(--kup-hover-background-color)
  );
  --kup_tree_icon_color: var(--kup-tree-icon-color, var(--kup-icon-color));
  --kup_tree_primary_color: var(
    --kup-tree-primary-color,
    var(--kup-primary-color)
  );
  --kup_tree_primary_color_rgb: var(
    --kup-tree-primary-color-rgb,
    var(--kup-primary-color-rgb)
  );
  --kup_tree_text_on_primary_color: var(
    --kup-tree-text-on-primary-color,
    var(--kup-text-on-primary-color)
  );

  display: block;
  font-family: var(--kup_tree_font_family);
  font-size: var(--kup_tree_font_size);
}

:host([prevent-x-scroll]) {
  .wrapper {
    overflow-x: hidden;
  }
}

#kup-component {
  color: var(--kup_tree_color);
}

.density-dense .wrapper .kup-tree,
.density-dense .wrapper .kup-tree {
  td:not(.grid-cell),
  th {
    padding: 0 0.5em;

    & .kup-tree__icon ~ .cell-content,
    & .kup-tree__icon + .cell-content {
      vertical-align: 0.4em;
    }
  }
}

.density-wide .wrapper .kup-tree,
.density-wide .wrapper .kup-tree {
  td:not(.grid-cell),
  th {
    padding: 0.75em 0.5em;
  }
}

.wrapper {
  overflow-x: auto;

  .kup-tree {
    border-collapse: collapse;
    width: max-content;

    thead {
      display: none;
      &.header--is-visible {
        display: table-header-group;

        th {
          padding: 0.8em 0.5em;
          font-size: 1.1em;
        }
      }

      th {
        text-align: left;
      }
    }

    tr,
    td {
      font-size: 1em;
      line-height: 1em;

      &.mdc-ripple-surface {
        --mdc-ripple-fg-opacity: 0.24;

        &:before,
        &:after {
          background-color: var(--kup_tree_primary_color);
        }
      }

      & .kup-tree__icon ~ .cell-content,
      & .kup-tree__icon + .cell-content {
        display: inline-block;
        vertical-align: 0.3em;
      }
    }

    td:not(.grid-cell),
    th {
      padding: 0.4em 0.5em;
    }

    td {
      padding: 0;
      white-space: nowrap;
    }

    &__indent {
      display: inline-block;
      width: calc(1.5em * var(--kup_tree_node_depth, 0));
    }

    &__icon {
      display: inline-block;
      margin-right: 0.4em;
      height: 1.5em;
      min-width: 1.5em;
      width: 1.5em;
    }

    &__node__expander {
      transition: transform 0.1s;
    }

    &__node {
      cursor: default;

      &.with-dyn:not(.kup-tree__node--disabled) {
        cursor: pointer;
      }

      &:not(.kup-tree__node--disabled) &__expander {
        cursor: pointer;
      }

      &:not(.kup-tree__node--disabled) .#{$kup-icon}.kup-tree__node__expander {
        cursor: pointer;
      }

      &--disabled {
        opacity: 0.4;

        &__expander {
          pointer-events: none;
        }
      }

      .#{$kup-icon}:not(.is-image) {
        background-color: var(--kup_tree_icon_color);
      }

      .#{$kup-icon}.kup-tree__node__expander:not(.is-image) {
        background-color: var(--kup_tree_color);
      }

      .#{$kup-icon}.is-image img {
        display: block;
        height: auto;
        width: 100%;
      }

      &:hover:not(.kup-tree__node--disabled):not(.kup-tree__node--selected) td {
        background-color: var(--kup_tree_hover_background_color);
        color: var(--kup_tree_hover_color);

        .#{$kup-icon} {
          background-color: var(--kup_tree_hover_color);
        }
      }

      &--selected:not(.kup-tree__node--disabled) td {
        background-color: rgba(var(--kup_tree_primary_color_rgb), 0.175);
        color: var(--kup_tree_color);
      }
    }

    &[data-show-columns] .kup-tree__node {
      border-bottom: solid 1px var(--kup-border-color);
    }
  }
}

#global-filter {
  background: var(--kup_tree_filter_background_color);
  margin-bottom: 1em;
  position: sticky;
  top: 0;
  z-index: 1;
}

.first-node .cell-content {
  font-weight: bold;
}

.cell-content {
  &--ellipsis {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    width: var(--kup_tree_content_width, auto);
  }
  &--highlighted {
    color: var(--kup_tree_text_on_primary_color);
    background-color: var(--kup_tree_primary_color);
  }
}

.#{$kup-icon}.#{$kup-icon-filter-remove}:not(.f-image) {
  background-color: var(--kup_tree_color);
  margin: 0 0.25em;
  height: 1em;
  width: 1em;
  cursor: pointer;
  float: right;
  margin: 0 0.25em;
  opacity: 0.5;
}

.grid-cell {
  height: 0; // Trick to let the cell' size to adapt to its content
}

tfoot {
  td {
    border-bottom: var(--kup_tree_border);
    border-right: var(--kup_tree_border);
    box-sizing: border-box;
    height: 36px;
    text-align: right;
    font-weight: bold;
    padding: 0.5em 0.3125em;
    &:hover {
      background-color: var(--kup-background-color);
    }
    &:first-of-type {
      border: none;
      border-right: var(--kup_tree_border);
    }
  }
}

.hidden {
  span {
    color: transparent;
    position: relative;
    text-overflow: ellipsis;
    transition: color 200ms;
    &:hover {
      color: var(--kup_tree_color);
    }
  }
}

.totals-value {
  font-weight: bold;
}

:host([as-accordion]) {
  .wrapper .kup-tree thead {
    display: table-header-group;

    tr {
      border-left: var(--kup_tree_border);
      border-right: var(--kup_tree_border);
    }
  }

  .density-dense {
    .first-node:not(.grid-cell) {
      padding: 0.5em 1em;
    }
  }

  .density-medium {
    .first-node:not(.grid-cell) {
      padding: 1em 1.5em;
    }
  }

  .density-wide {
    .first-node:not(.grid-cell) {
      padding: 1.75em 1.75em;
    }
  }

  .kup-tree__node--first {
    border: none;
    box-sizing: border-box;
    display: block;

    &:hover,
    &[data-is-expanded] {
      background-color: var(--kup_tree_hover_background_color);

      .cell-content {
        color: var(--kup_tree_hover_color);
      }

      .#{$kup-icon} {
        background-color: var(--kup_tree_hover_color);
      }
    }

    &[data-is-expanded] {
      .first-node {
        border-bottom-left-radius: 4px;
        border-bottom-right-radius: 4px;
      }

      .#{$kup-icon-dropdown} {
        transform: rotate(180deg);
      }
    }

    &:first-of-type {
      .first-node {
        border-top-left-radius: 4px;
        border-top-right-radius: 4px;
        border-top: var(--kup_tree_border);
      }
    }

    &:last-of-type {
      .first-node {
        border-bottom-left-radius: 4px;
        border-bottom-right-radius: 4px;
      }
    }

    .first-node {
      align-items: center;
      border-bottom: var(--kup_tree_border);
      border-left: var(--kup_tree_border);
      border-right: var(--kup_tree_border);
      box-sizing: border-box;
      color: var(--kup_tree_color);
      cursor: pointer;
      display: flex;
      line-height: 1.75em;
      outline: none;
      text-align: left;
      transition: background-color 80ms, color 80ms;
      width: 100%;
    }

    .kup-tree__icon {
      margin-left: 0;
      margin-right: 0.5em;
      min-width: 1.5em;
    }

    .cell-content {
      margin-right: 0.5em;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: pre;
    }

    .#{$kup-icon-dropdown} {
      background-color: var(--kup_tree_icon_color);
      height: 1.5em;
      margin-left: auto;
      margin-right: 0;
      min-width: 1.5em;
      width: 1.5em;
      transition: transform 0.1s;
    }
  }

  // First accordion item right below a tree item
  .kup-tree__node:not(.kup-tree__node--first) + .kup-tree__node--first {
    border-top: var(--kup_tree_border);
    border-top-left-radius: 4px;
    border-top-right-radius: 4px;
  }
}

.kup-menu {
  animation: fade-in 0.25s ease-out;
  background-color: var(--kup-background-color);
  box-shadow: var(--kup-box-shadow);
  color: var(--kup-text-color);
  display: none;
  max-height: 33vh;
  overflow: auto;
  position: relative;
  transform: none;
  transform-origin: unset;
  transition: height 0.2s;
  will-change: unset;

  &.visible {
    display: block;
  }
}

.#{$kup-icon}.#{$kup-icon-collapsed} {
  -webkit-mask: var(--kup-collapsed-icon);
  mask: var(--kup-collapsed-icon);
}

.#{$kup-icon}.#{$kup-icon-dropdown} {
  -webkit-mask: var(--kup-dropdown-icon);
  mask: var(--kup-dropdown-icon);
}

.#{$kup-icon}.#{$kup-icon-expanded} {
  -webkit-mask: var(--kup-expanded-icon);
  mask: var(--kup-expanded-icon);
}

.#{$kup-icon}.#{$kup-icon-filter-remove} {
  -webkit-mask: var(--kup-filter-remove-icon);
  mask: var(--kup-filter-remove-icon);
}
